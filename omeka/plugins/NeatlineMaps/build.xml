<?xml version="1.0" encoding="utf-8"?>
<!--
  Requirements:

  Pear:
    - phpcs
    -
  PECL:
    - xdebug

  JavaScript:
  - closure-compiler (npm install -g closure-compiler): Bindings to Google's Closure Compiler
  - jshint (npm install -g jshint): A CLI for JSHint
  - fixmyjs (npm install -g fixmyjs): Automatically fixes silly errors from jshint 


-->
<project name="NeatlineMaps" default="build">
  <property environment="ENV" />

  <property name="build.dir" value="${basedir}/build" />
  <property name="report.dir" value="${build.dir}/report" />
  <property name="dist.dir" value="${build.dir}/dist" />
  <property name="tmp.dir" value="${build.dir}/tmp" />
  <property name="staging.dir" value="${build.dir}/tmp/NeatlineMaps" />

  <property name="dir.views" value="views" />

  <property name="project.name" value="NeatlineMaps" />
  <property name="lang.dir" location="languages" />
  <property name="core.pot" location="../../application/languages/Omeka.pot" />

  <!-- Load the Ant-contrib to give us access to some very useful tasks! -->
  <!-- the .jar file is located in the tools directory -->
  <taskdef resource="net/sf/antcontrib/antlib.xml">
    <classpath>
      <pathelement location="${build.dir}/tools/ant-contrib-1.0b3.jar"/>
    </classpath>
  </taskdef>

  <target name="update-pot" description="Update the translation template.">
    <property name="pot.file" location="${lang.dir}/template.pot"/>
    <property name="pot.base" location="${lang.dir}/template.base.pot"/>
    <tempfile property="pot.temp" suffix=".pot"/>
    <tempfile property="pot.duplicates" suffix="-duplicates.pot" />
    <apply executable="xgettext" relative="true" parallel="true" verbose="true">
      <arg value="-L"/>
      <arg value="php"/>
      <arg value="--from-code=utf-8"/>
      <arg value="-k__"/>
      <arg value="--flag=__:1:pass-php-format"/>
      <arg value="--omit-header"/>
      <arg value="-F"/>
      <arg value="-o"/>
      <arg file="${pot.temp}"/>
      <fileset dir="." includes="**/*.php **/*.phtml" excludes="tests/"/>
    </apply>
    <exec executable="msgcomm">
      <arg value="--omit-header" />
      <arg value="-o" />
      <arg file="${pot.duplicates}" />
      <arg file="${pot.temp}" />
      <arg file="${core.pot}" />
    </exec>
    <exec executable="msgcomm">
      <arg value="-u" />
      <arg value="-o" />
      <arg file="${pot.temp}" />
      <arg file="${pot.temp}" />
      <arg file="${pot.duplicates}" />
    </exec>
    <exec executable="msgcat">
      <arg value="-o"/>
      <arg file="${pot.file}"/>
      <arg file="${pot.base}"/>
      <arg file="${pot.temp}"/>
    </exec>
    <delete file="${pot.temp}" quiet="true" />
    <delete file="${pot.duplicates}" quiet="true" />
  </target>

  <target name="build-mo" description="Build the MO translation files.">
    <apply executable="msgfmt" dest="${lang.dir}" verbose="true">
      <arg value="-o"/>
      <targetfile />
      <srcfile />
      <fileset dir="${lang.dir}" includes="*.po"/>
      <mapper type="glob" from="*.po" to="*.mo"/>
    </apply>
  </target>

  <target name="build"
    depends="prepare,lint,phploc,pdepend,phpmd-ci,phpcs-ci,phpcpd,phpdox,phpunit,phpcb"/>

  <target name="build-parallel"
    depends="prepare,lint,tools-parallel,phpunit,phpcb"/>

  <target name="install-dependencies" description="Installs PEAR and node dependencies">
    <!-- auto-discover channels -->
    <exec executable="pear">
      <arg value="config-set"/>
      <arg value="auto_discover"/>
      <arg value="1" />
    </exec>

    <exec executable="pear">
      <arg value="install" />
      <arg value="--alldeps" />
      <arg value="pear.phpunit.de/PHPUnit" />
      <arg value="PHP_CodeSniffer" />
      <arg value="pear.pdepend.org/PHP_Depend" />
      <arg value="pear.phpmd.org/PHP_PMD" />
      <arg value="pear.phpqatools.org/phpqatools" />
      <arg value="pear.netpirates.net/phpDox" />
    </exec>

    <exec executable="pecl">
      <arg value="install" />
      <arg value="xdebug"/>
    </exec>

    <echo>Installing npm packages...</echo>

    <exec executable="npm">
      <arg value="-g" />
      <arg value="install"/>
      <arg value="jshint" />
    </exec>
  </target>

  <target name="update-dependencies" description="Updates testing dependencies">
    <exec executable="pear">
      <arg value="update-channels" />
    </exec>

    <exec executable="pear">
      <arg value="upgrade-all" />
    </exec>

    <exec executable="pecl">
      <arg value="upgrade-all" />
    </exec>

    <exec executable="npm">
      <arg value="update"/>
      <arg value="npm" />
      <arg value="jshint" />
      <arg value="-g" />
    </exec>
  </target>

  <target name="tools-parallel"
    description="Run tools in parallel">
    <parallel threadcount="2">
      <sequential>
        <antcall target="pdepend"/>
        <antcall target="phpmd-ci"/>
      </sequential>
      <antcall target="phpcpd"/>
      <antcall target="phpcs-ci"/>
      <antcall target="phploc"/>
      <antcall target="phpdox"/>
    </parallel>
  </target>

  <target name="clean" description="Cleanup build artifacts">
    <delete dir="${build.dir}/api"/>
    <delete dir="${build.dir}/code-browser"/>
    <delete dir="${build.dir}/coverage"/>
    <delete dir="${build.dir}/logs"/>
    <delete dir="${build.dir}/pdepend"/>
    <delete dir="${dist.dir}"/>
    <delete dir="${staging.dir}" />
  </target>

  <target name="prepare" depends="clean"
    description="Prepare for build">
    <mkdir dir="${build.dir}/api"/>
    <mkdir dir="${build.dir}/code-browser"/>
    <mkdir dir="${build.dir}/coverage"/>
    <mkdir dir="${build.dir}/logs"/>
    <mkdir dir="${build.dir}/pdepend"/>
    <mkdir dir="${dist.dir}"/>
  </target>

  <target name="jshint" description="Runs JSHint on JavaScript">
    <echo message="Linting JavaScript..." />
    <apply executable="jshint">
      <fileset dir="${basedir}/views" excludes="**/*.min.js, **/*-min.js, **/build/**, **/simile/**, **/jquery*/**, **/taffy*.js. **/openlayers/**" includes="**/*.js" />
      <srcfile/>
    </apply>
  </target>

  <target name="minify-js" depends="_copy" description="Minifies JavaScript using Google's Closure Compiler">
    <echo message="Minifying JavaScript..." />

    <!-- work around for css files -->
    <delete>
      <fileset dir="${staging.dir}/${dir.views}/">
        <include name="**/*.js"/>
      </fileset>
    </delete>


    <apply executable="java" parallel="false">
      <!--<fileset dir="${basedir}/${dir.views}/" excludes="**/*.min.js, **/spec/**," includes="**/*.js" />-->
      <fileset dir="${basedir}/${dir.views}/" excludes="**/spec/**" includes="**/*.js"/>

      <arg line="-jar" />
      <arg path="${basedir}/build/tools/closure-compiler-v1346.jar" />
      <!--<arg path="${basedir}/build/tools/yuicompressor-2.4.5.jar" />-->

      <arg line="--js" />
      <srcfile/>
      <arg line="--compilation_level" />
      <arg value="SIMPLE_OPTIMIZATIONS" />
      <arg line="--js_output_file" />
      <mapper type="glob" from="*.js" to="${staging.dir}/${dir.views}/*.js" />
      <!--<mapper type="identity" /> -->
      <targetfile/>
    </apply>
  </target>

  <target name="minify-css" depends="_copy" description="Minifies CSS files">
    <echo message="Minifying CSS files" />
    <!-- work around for css files -->
    <delete>
      <fileset dir="${staging.dir}/${dir.views}/">
        <include name="**/*.css"/>
      </fileset>
    </delete>


    <apply executable="java" parallel="false">

      <fileset dir="${basedir}/${dir.views}/" excludes="**/*.min.css" includes="**/*.css"/>
      <arg line="-jar" />
      <arg path="${build.dir}/tools/yuicompressor-2.4.5.jar" />
      <srcfile/>
      <arg line="-o" />
      <mapper type="glob" from="*.css" to="${staging.dir}/${dir.views}/*.css" />
      <!-- <mapper type="identity" /> -->
      <targetfile />
    </apply>

  </target>

  <target name="optimize-png" depends="_copy" description="Optimizes .png images">
    <echo message="Optimizing pngs..." />
    <echo message="This may tak a while, but everything else is already done." />
    <echo message=" " />

    <echo message="Running optipng on the .png files..." />

    <!-- On *nix's and OS X, check for optipng and give a helpful message if it's not installed -->
    <if>
      <and>
        <os family="unix" />
        <available file="optipng" filepath="${ENV.PATH}" />
      </and>
      <then>
        <!-- work around https://sourceforge.net/tracker/?func=detail&aid=2671422&group_id=151404&atid=780916 -->
        <delete>
          <fileset dir="${staging.dir}/${dir.views}/">
            <include name="**/*.png"/>
          </fileset>
        </delete>
        <apply executable="optipng"  osfamily="unix">
          <fileset dir="${basedir}/${dir.views}/" includes="**/*.png" />
          <arg value="-quiet"/>
          <arg value="-o7"/>
          <arg value="-out"/>
          <targetfile/>
          <srcfile/>
          <mapper type="glob" from="*.png" to="${staging.dir}/${dir.views}/*.png"/>
        </apply>
      </then>
      <elseif>
        <os family="unix" />
        <then>
          <echo message="*** optipng NOT INSTALLED. SKIPPING OPTIMIZATION OF PNGs." />
          <echo message="*** Install optipng to enable png optimization." />
          <echo message="*** For instructions see 'Dependencies' at: http://html5boilerplate.com/docs/#Build-script#dependencies" />
        </then>
      </elseif>
    </if>

  </target>

  <target name="optimize-jpeg" depends="_copy" description="Optimizes .jpg images using jpegtan">
    <echo message="Optimizing jpegs..." />

    <var name="strip-meta-tags" value="all" />

    <delete>
      <fileset dir="${staging.dir}/${dir.views}/">
        <include name="**/*.jpg"/>
      </fileset>
    </delete>


    <!-- On *nix's and OS X, check for jpegtran and give a helpful message if it's not installed -->
    <if>
      <and>
        <os family="unix" />
        <available file="jpegtran" filepath="${ENV.PATH}" />
      </and>
      <then>
        <apply executable="jpegtran" dest="${staging.dir}/${dir.views}/" osfamily="unix">
          <fileset dir="${basedir}/${dir.views}/" includes="**/*.jpg" />
          <arg value="-copy"/>
          <arg value="${strip-meta-tags}"/>
          <arg value="-optimize"/>
          <arg value="-outfile"/>
          <targetfile/>
          <srcfile/>
          <mapper type="glob" from="*.jpg" to="${staging.dir}/${dir.views}/"/>
          <!-- you may want to flag optimized images. If so, do it here. Otherwise change this to type="identity" -->
          <!--<mapper type="glob" from="*.jpg" to="*.jpg"/>-->
        </apply>
      </then>
      <elseif>
        <os family="unix" />
        <then>
          <echo message="*** jpegtran NOT INSTALLED. SKIPPING OPTIMIZATION OF JPEGs." />
          <echo message="*** Install jpegtran to enable jpeg optimization." />
          <echo message="*** For instructions see 'Dependencies' at: http://html5boilerplate.com/docs/#Build-script#dependencies" />
        </then>
      </elseif>
    </if>

    <apply executable="${basedir}/build/tools/jpegtran.exe" dest="./images/optimized" osfamily="windows">
      <fileset dir="${basedir}/images" includes="**/*.jpg" />
      <arg value="-copy"/>
      <arg value="${strip-meta-tags}"/>
      <arg value="-optimize"/>
      <arg value="-outfile"/>
      <targetfile/>
      <srcfile/>
      <mapper type="identity"/>
      <!-- you may want to flag optimized images. If so, do it here. Otherwise change this to type="identity" -->
      <!--<mapper type="glob" from="*.jpg" to="*.jpg"/>-->
    </apply>

  </target>


  <target name="package" description="Build a package of this plugin" 
    depends="clean,minify-css, minify-js, optimize-png, optimize-jpeg">

    <tstamp />

    <property name="now" value="${DSTAMP}-${TSTAMP}" />
    <property name="tar" value="${ant.project.name}-${now}.tar"/>
    <property name="gzip" value="${tar}.gz" />

    <echo message="Creating zipped tarball" />
    <tar destfile="${dist.dir}/${tar}"
      basedir="${tmp.dir}" />

    <gzip zipfile="${dist.dir}/${gzip}" src="${dist.dir}/${tar}" />
    <delete file="${dist.dir}/${tar}" />

    <echo message="Creating zip file" />
    <zip destfile="${dist.dir}/${ant.project.name}-${now}.zip"
      basedir="${tmp.dir}" />

  </target>

  <target name="_copy" description="Copies files in to ${staging.dir}">
    <echo message="Copying all files..." />

    <mkdir dir="${staging.dir}" />

    <copy todir="${staging.dir}">
      <fileset dir="${basedir}/" excludes="**/build/**" />
    </copy>
  </target>

  <target name="dist" description="Build a distribution page of the plugin" depends="_copy">
    <!-- read ini file -->

    <property name="tar" value="${project.name}.tar"/>
    <property name="gzip" value="${tar}.gz" />

    <tar destfile="${dist.dir}/${tar}.tar"
      basedir="${staging.dir}/tmp"
      excludes="test/**,spec**" />

    <gzip zipfile="${dist.dir}/${gzip}" src="${tar}" />
    <delete file="${dist.dir}/${tar}" />


  </target>

  <target name="lint">
    <apply executable="php" failonerror="true">
      <arg value="-l" />

      <fileset dir="${basedir}/">
        <include name="**/*.php" />
        <modified />
      </fileset>
    </apply>
  </target>

  <target name="fixstyle" description="Automate the fixing of common JavaScript
    errors">
    <exec executable="fixjsstyle">
      <arg value="--nojsdoc" />
      <arg value="-r" />
      <arg path="${basedir}/" />
    </exec>
  </target>

  <target name="phploc" description="Measure project size using PHPLOC">
    <exec executable="phploc">
      <arg value="--log-csv" />
      <arg value="${build.dir}/logs/phploc.csv" />
      <arg path="${basedir}/" />
    </exec>
  </target>

  <target name="pdepend"
    description="Calculate software metrics using PHP_Depend">
    <exec executable="pdepend">
      <arg value="--jdepend-xml=${build.dir}/logs/jdepend.xml" />
      <arg value="--jdepend-chart=${build.dir}/pdepend/dependencies.svg" />
      <arg value="--overview-pyramid=${build.dir}/pdepend/overview-pyramid.svg" />
      <arg path="${basedir}/" />
    </exec>
  </target>

  <target name="phpmd"
    description="Perform project mess detection using PHPMD">
    <exec executable="phpmd">
      <arg path="${basedir}/" />
      <arg value="text" />
      <arg value="${build.dir}/phpmd.xml" />
    </exec>
  </target>

  <target name="phpmd-ci"
    description="Perform project mess detection using PHPMD">
    <exec executable="phpmd">
      <arg path="${basedir}/" />
      <arg value="xml" />
      <arg value="${build.dir}/phpmd.xml" />
      <arg value="--reportfile" />
      <arg value="${build.dir}/logs/pmd.xml" />
    </exec>
  </target>

  <target name="phpcs"
    description="Find coding standard violations using PHP_CodeSniffer">
    <exec executable="phpcs">
      <arg value="--standard=${build.dir}/phpcs.xml" />
      <arg path="${basedir}/" />
    </exec>
  </target>

  <target name="phpcs-ci"
    description="Find coding standard violations using PHP_CodeSniffer">
    <exec executable="phpcs" output="/dev/null">
      <arg value="--report=checkstyle" />
      <arg value="--report-file=${build.dir}/logs/checkstyle.xml" />
      <arg value="--standard=${build.dir}/phpcs.xml" />
      <arg path="${basedir}/" />
    </exec>
  </target>

  <target name="phpcpd" description="Find duplicate code using PHPCPD">
    <exec executable="phpcpd">
      <arg value="--log-pmd" />
      <arg value="${build.dir}/logs/pmd-cpd.xml" />
      <arg path="${basedir}/" />
    </exec>
  </target>

  <target name="phpdox" description="Generate API documentation using phpDox">
    <exec executable="phpdox" />
  </target>

  <target name="phpunit" description="Run unit tests with PHPUnit">
    <exec executable="phpunit" failonerror="true"/>
  </target>

  <target name="phpcb"
    description="Aggregate tool output with PHP_CodeBrowser">
    <exec executable="phpcb">
      <arg value="--log" />
      <arg path="${build.dir}/logs" />
      <arg value="--source" />
      <arg path="${basedir}/" />
      <arg value="--output" />
      <arg path="${build.dir}/code-browser" />
    </exec>
  </target>

  <target name="usage">
    <echo message="Type ant -p to list all the targets available in this build script." />
  </target>
</project>
